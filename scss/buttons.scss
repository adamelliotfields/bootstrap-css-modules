@import './_variables.scss';
@import './mixins/_border-radius.scss';
@import './mixins/_box-shadow.scss';
@import './mixins/_buttons.scss';
@import './mixins/_hover.scss';
@import './mixins/_transition.scss';

// Base styles
.btn {
  display: inline-block;
  font-weight: $btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: $input-btn-border-width solid transparent;
  @include button-size($input-btn-padding-y, $input-btn-padding-x, $font-size-base, $input-btn-line-height, $btn-border-radius);
  @include transition($btn-transition);

  // Share hover and focus styles
  @include hover-focus {
    text-decoration: none;
  }
  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: 0.65;
    @include box-shadow(none);
  }

  &:active,
  &.active {
    background-image: none;
    @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset[disabled] a.btn {
  pointer-events: none;
}

//
// Alternate buttons
//

@each $color, $value in $theme-colors {
  .btn#{$color} {
    @include button-variant($value, $value);
  }
}

@each $color, $value in $theme-colors {
  .btnOutline#{$color} {
    @include button-outline-variant($value, #fff);
  }
}

//
// Link buttons
//

// Make a button look and behave like a link
.btnLink {
  font-weight: $font-weight-normal;
  color: $link-color;
  border-radius: 0;

  &,
  &:active,
  &.active,
  &:disabled {
    background-color: transparent;
    @include box-shadow(none);
  }
  &,
  &:focus,
  &:active {
    border-color: transparent;
    box-shadow: none;
  }
  @include hover {
    border-color: transparent;
  }
  @include hover-focus {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
  }
  &:disabled {
    color: $btn-link-disabled-color;

    @include hover-focus {
      text-decoration: none;
    }
  }
}

//
// Button Sizes
//

.btnLg {
  @include button-size($input-btn-padding-y-lg, $input-btn-padding-x-lg, $font-size-lg, $line-height-lg, $btn-border-radius-lg);
}

.btnSm {
  @include button-size($input-btn-padding-y-sm, $input-btn-padding-x-sm, $font-size-sm, $line-height-sm, $btn-border-radius-sm);
}

//
// Block button
//

.btnBlock {
  display: block;
  width: 100%;
}

// Vertically space out multiple block buttons
.btnBlock + .btnBlock {
  margin-top: $btn-block-spacing-y;
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btnBlock {
    width: 100%;
  }
}

// Button Group
// ==========================================================================

// Make the div behave like a button
.btnGroup,
.btnGroupVertical {
  position: relative;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;
    flex: 0 1 auto;
    margin-bottom: 0;

    // Bring the hover, focused, and "active" buttons to the fron to overlay
    // the borders properly
    @include hover {
      z-index: 2;
    }
    &:focus,
    &:active,
    &.active {
      z-index: 2;
    }
  }

  // Prevent double borders when buttons are next to each other
  .btn + .btn,
  .btn + .btnGroup,
  .btnGroup + .btn,
  .btnGroup + .btnGroup {
    margin-left: -$input-btn-border-width;
  }
}

// Optional: Group multiple button groups together for a toolbar
.btnToolbar {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
}

// Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
.btnGroup > .btn:first-child {
  margin-left: 0;

  &:not(:last-child) {
    @include border-right-radius(0);
  }
}

// Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
.btnGroup > .btn:last-child:not(:first-child) {
  @include border-left-radius(0);
}

// Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
.btnGroup > .btnGroup {
  float: left;
}

.btnGroup > .btnGroup:not(:first-child):not(:last-child) > .btn {
  border-radius: 0;
}

.btnGroup > .btnGroup:first-child:not(:last-child) {
  > .btn:last-child {
    @include border-right-radius(0);
  }
}

.btnGroup > .btnGroup:last-child:not(:first-child) > .btn:first-child {
  @include border-left-radius(0);
}

// Remix the default button sizing classes into new ones for easier manipulation.
.btnGroupSm > .btn { @extend .btnSm; }
.btnGroupLg > .btn { @extend .btnLg; }

// Vertical button groups
.btnGroupVertical {
  display: inline-flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;

  .btn,
  .btnGroup {
    width: 100%;
  }

  > .btn + .btn,
  > .btn + .btnGroup,
  > .btnGroup + .btn,
  > .btnGroup + .btnGroup {
    margin-top: -$input-btn-border-width;
    margin-left: 0;
  }
}

.btnGroupVertical > .btn {
  &:not(:first-child):not(:last-child) {
    border-radius: 0;
  }
  &:first-child:not(:last-child) {
    @include border-bottom-radius(0);
  }
  &:last-child:not(:first-child) {
    @include border-top-radius(0);
  }
}

.btnGroupVertical > .btnGroup:not(:first-child):not(:last-child) > .btn {
  border-radius: 0;
}

.btnGroupVertical > .btnGroup:first-child:not(:last-child) {
  > .btn:last-child {
    @include border-bottom-radius(0);
  }
}

.btnGroupVertical > .btnGroup:last-child:not(:first-child) > .btn:first-child {
  @include border-top-radius(0);
}

// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

[data-toggle="buttons"] {
  > .btn,
  > .btnGroup > .btn {
    input[type="radio"],
    input[type="checkbox"] {
      position: absolute;
      clip: rect(0,0,0,0);
      pointer-events: none;
    }
  }
}
