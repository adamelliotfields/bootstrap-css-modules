@import './_variables.scss';
@import './mixins/_border-radius.scss';
@import './mixins/_box-shadow.scss';
@import './mixins/_breakpoints.scss';

// Alert
// ==========================================================================

@import './alert.scss';

// Badge
// ==========================================================================

@import './badge.scss';

// Quick fix for badges in buttons
.btn .badge {
  position: relative;
  top: -1px;
}

// Breadcrumb
// ==========================================================================

@import './breadcrumb.scss';

// Buttons
// ==========================================================================

@import './buttons.scss';

// Button Group
// ==========================================================================

// Optional: Group multiple button groups together for a toolbar
.btnToolbar {
  .inputGroup {
    width: auto;
  }
}

.btnGroup > .btn:not(:first-child):not(:last-child):not(.dropdownToggle) {
  border-radius: 0;
}

// Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
.btnGroup > .btn:first-child {
  &:not(:last-child):not(.dropdownToggle) {
    @include border-right-radius(0);
  }
}

// Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
.btnGroup > .dropdownToggle:not(:first-child) {
  @include border-left-radius(0);
}

.btnGroup > .btnGroup:first-child:not(:last-child) {
  > .dropdownToggle {
    @include border-right-radius(0);
  }
}

// On active and open, don't show outline
.btnGroup .dropdownToggle:active,
.btnGroup.open .dropdownToggle {
  outline: 0;
}

// Split button dropdowns
.btn + .dropdownToggleSplit {
  padding-right: $btn-padding-x * .75;
  padding-left: $btn-padding-x * .75;

  &::after {
    margin-left: 0;
  }
}

.btnSm + .dropdownToggleSplit {
  padding-right: $btn-padding-x-sm * .75;
  padding-left: $btn-padding-x-sm * .75;
}

.btnLg + .dropdownToggleSplit {
  padding-right: $btn-padding-x-lg * .75;
  padding-left: $btn-padding-x-lg * .75;
}

// The clickable button for toggling the menu
// Remove the gradient and set the same inset shadow as the :active state
.btnGroup.open .dropdownToggle {
  @include box-shadow($btn-active-box-shadow);

  // Show no shadow for `.btn-link` since it has no other button styles.
  &.btnLink {
    @include box-shadow(none);
  }
}

.btnGroupVertical > .btnGroup:first-child:not(:last-child) {
  > .dropdownToggle {
    @include border-bottom-radius(0);
  }
}

// Card
// ==========================================================================

@import './card.scss';

.card {
  > .listGroup:first-child {
    .listGroupItem:first-child {
      @include border-top-radius($card-border-radius);
    }
  }

  > .listGroup:last-child {
    .listGroupItem:last-child {
      @include border-bottom-radius($card-border-radius);
    }
  }
}

// Custom Forms
// ==========================================================================

@import './carousel.scss';

// Close
// ==========================================================================

@import './close.scss';

// Custom Forms
// ==========================================================================

@import './custom-forms.scss';

// Dropdown
// ==========================================================================

@import './dropdown.scss';

// Forms
// ==========================================================================

@import './forms.scss';

// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
.formInline {
  // Kick in the inline
  @include media-breakpoint-up(sm) {
    // Custom form controls
    .customControl {
      display: flex;
      align-items: center;
      justify-content: center;
      padding-left: 0;
    }

    .customControlIndicator {
      position: static;
      display: inline-block;
      margin-right: $form-check-input-margin-x; // Flexbox alignment means we lose our HTML space here, so we compensate.
      vertical-align: text-bottom;
    }
  }
}

.hasSuccess .customControl {
  color: #5cb85c;
}

.hasWarning .customControl {
  color: #f0ad4e;
}

.hasDanger .customControl {
  color: #d9534f;
}

// Input Group
// ==========================================================================

// Remix the default form control sizing classes into new ones for easier manipulation.
.inputGroupLg > .inputGroupBtn > .btn {
  @extend .formControlLg;
}

.inputGroupSm > .inputGroupBtn > .btn {
  @extend .formControlSm;
}

// Reset rounded corners
.inputGroupBtn:not(:last-child) > .btn,
.inputGroupBtn:not(:last-child) > .btnGroup > .btn,
.inputGroupBtn:not(:last-child) > .dropdownToggle,
.inputGroupBtn:not(:first-child) > .btn:not(:last-child):not(.dropdownToggle),
.inputGroupBtn:not(:first-child) > .btnGroup:not(:last-child) > .btn {
  @include border-right-radius(0);
}

.inputGroupBtn:not(:first-child) > .btn,
.inputGroupBtn:not(:first-child) > .btnGroup > .btn,
.inputGroupBtn:not(:first-child) > .dropdownToggle,
.inputGroupBtn:not(:last-child) > .btn:not(:first-child),
.inputGroupBtn:not(:last-child) > .btnGroup:not(:first-child) > .btn {
  @include border-left-radius(0);
}

// Button input groups
.inputGroupBtn {
  // Negative margin for spacing, position for bringing hovered/focused/actived
  // element above the siblings.
  > .btn {
    position: relative;
    // Vertically stretch the button and center its content
    flex: 1;

    + .btn {
      margin-left: (-$input-btn-border-width);
    }

    // Bring the "active" button to the front
    @include hover-focus-active {
      z-index: 3;
    }
  }

  // Negative margin to only have a single, shared border between the two
  &:not(:last-child) {
    > .btn,
    > .btnGroup {
      margin-right: (-$input-btn-border-width);
    }
  }
  &:not(:first-child) {
    > .btn,
    > .btnGroup {
      z-index: 2;
      margin-left: (-$input-btn-border-width);
      // Because specificity
      @include hover-focus-active {
        z-index: 3;
      }
    }
  }
}

// Jumbotron
// ==========================================================================

@import './jumbotron.scss';

// List Group
// ==========================================================================

@import './list-group.scss';

// Modal
// ==========================================================================

@import './modal.scss';

// Nav
// ==========================================================================

@import './nav.scss';

// Navbar
// ==========================================================================

@import './navbar.scss';

// Generate series of `.navbar-toggleable-*` responsive classes for configuring where your navbar collapses.
.navbarToggleable {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $next: breakpoint-next($breakpoint, $grid-breakpoints);
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    &#{$infix} {
      @include media-breakpoint-down($breakpoint) {
        .navbarNav {
          .dropdownMenu {
            position: static;
            float: none;
          }
        }
      }
    }
  }
}

// Pagination
// ==========================================================================

@import './pagination.scss';

// Popover
// ==========================================================================

@import './popover.scss';

// Progress
// ==========================================================================

@import './progress.scss';

// Tooltip
// ==========================================================================

@import './tooltip.scss';

// Transitions
// ==========================================================================

@import './transitions.scss';
